Q)You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
soln:
# Definition for singly-linked list.
from typing import Optional
#class ListNode:
    #def __init__(self, val=0, next=None):
         
         #self.val = val
         #self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        soln=ListNode()
        current=soln
        carry=0

        while l1 or l2 or carry:
            if l1 is not None:
                val1=l1.val
            else:
                val1=0

            if l2 is not None:
                val2=l2.val
            else:
                val2=0

            total=val1+val2+carry
            carry=total//10
            digit=total%10

            current.next=ListNode(digit)
            current=current.next

            if l1:l1=l1.next
            if l2:l2=l2.next
        return soln.next
        
